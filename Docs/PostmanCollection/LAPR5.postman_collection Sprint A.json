{
	"info": {
		"_postman_id": "a36458a5-8566-474a-8c58-7615dcf4e67d",
		"name": "LAPR5",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" width=\"2162\" height=\"1530\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36975066",
		"_collection_link": "https://dblapr5.postman.co/workspace/3DB_LAPR5-Workspace~5b270df5-6b25-4757-8927-8054f95a07ad/collection/14322304-a36458a5-8566-474a-8c58-7615dcf4e67d?action=share&source=collection_link&creator=36975066"
	},
	"item": [
		{
			"name": "Specialization",
			"item": [
				{
					"name": "GET Specialization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbjNAaG90bWFpbC5jb20iLCJyb2xlIjoiQWRtaW4iLCJqdGkiOiI3MjdlMDAyZS02NzEyLTRlYTgtOGNjYy01Y2IxY2YwYTJiMGIiLCJpYXQiOjE3Mjk5MzUwNzIsIm5iZiI6MTcyOTkzNTA3MiwiZXhwIjoxNzMwMTk0MjcyLCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.HyUaIw7-hN2jMQyMXg_MRsdhY_OR35djiwRkBHK9hrU",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/Specializations",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Specializations"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET Specialization by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Specializations/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Specializations",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "1903b9aa-a4d9-4504-adb1-3a1222d22bbb"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "POST Specialization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"brain\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Specializations",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Specializations"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "OperationType",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "GET All OperationType",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1, spec2, opTypePost1, opTypePost2;",
											"",
											"// POST specialization 1",
											"pm.sendRequest({",
											"    url: 'https://localhost:5001/api/specializations/',",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": \"Anaesthetist\"",
											"        })",
											"    }",
											"}, function (err, res) {",
											"",
											"    spec1 = res.json();",
											"",
											"    // POST specialization 2",
											"    pm.sendRequest({",
											"        url: 'https://localhost:5001/api/specializations/',",
											"        method: 'POST',",
											"        header: {",
											"            'Content-Type': 'application/json; charset=utf-8',",
											"            'Authorization': `Bearer ${authToken}`",
											"        },",
											"        body: {",
											"            mode: 'raw',",
											"            raw: JSON.stringify({",
											"                \"name\": \"Cardiology\"",
											"            })",
											"        }",
											"    }, function (err, res) {",
											"",
											"        spec2 = res.json();",
											"",
											"        // POST operation type 1",
											"        pm.sendRequest({",
											"            url: 'https://localhost:5001/api/OperationTypes/',",
											"            method: 'POST',",
											"            header: {",
											"                'Content-Type': 'application/json; charset=utf-8',",
											"                'Authorization': `Bearer ${authToken}`",
											"            },",
											"            body: {",
											"                mode: 'raw',",
											"                raw: JSON.stringify({",
											"                    \"name\": \"Operation Type Z\",",
											"                    \"anesthesiaPatientPreparationInMinutes\": 30,",
											"                    \"surgeryInMinutes\": 120,",
											"                    \"cleaningInMinutes\": 30,",
											"                    \"requiredStaff\": [",
											"                        { \"specialization\": \"Cardiology\", \"total\": 2 },",
											"                        { \"specialization\": \"Anaesthetist\", \"total\": 5 }",
											"                    ]",
											"                })",
											"            }",
											"        }, function (err, res) {",
											"",
											"            opTypePost1 = res.json();",
											"",
											"            // POST operation type 2",
											"            pm.sendRequest({",
											"                url: 'https://localhost:5001/api/OperationTypes/',",
											"                method: 'POST',",
											"                header: {",
											"                    'Content-Type': 'application/json; charset=utf-8',",
											"                    'Authorization': `Bearer ${authToken}`",
											"                },",
											"                body: {",
											"                    mode: 'raw',",
											"                    raw: JSON.stringify({",
											"                        \"name\": \"Operation Type X\",",
											"                        \"anesthesiaPatientPreparationInMinutes\": 45,",
											"                        \"surgeryInMinutes\": 150,",
											"                        \"cleaningInMinutes\": 40,",
											"                        \"requiredStaff\": [",
											"                            { \"specialization\": \"Cardiology\", \"total\": 3 }",
											"                        ]",
											"                    })",
											"                }",
											"            }, function (err, res) {",
											"",
											"                opTypePost2 = res.json();",
											"",
											"                // GET all ",
											"                pm.sendRequest({",
											"                    url: 'https://localhost:5001/api/OperationTypes/',",
											"                    method: 'GET',",
											"                    header: {",
											"                        'Content-Type': 'application/json; charset=utf-8',",
											"                        'Authorization': `Bearer ${authToken}`",
											"                    }",
											"                }, function (err, res) {",
											"                    if (err) {",
											"                        console.error(err);",
											"                    } else {",
											"                        let opTypes = res.json();",
											"",
											"                        pm.test(\"GET All request status code is 200\", function () {",
											"                            pm.expect(res).to.have.status(200);",
											"                        });",
											"",
											"                        pm.test(\"GET All Operation Types response is an array\", function () {",
											"                            pm.expect(opTypes).to.be.an(\"array\");",
											"                        });",
											"",
											"                        pm.test(\"GET All Operation Types response is an array with at least 2 items\", function () {",
											"                            pm.expect(opTypes.length).to.be.at.least(2);",
											"                        });",
											"",
											"                        const createdOpType1 = opTypes.find(type => type.id === opTypePost1.id);",
											"                        const createdOpType2 = opTypes.find(type => type.id === opTypePost2.id);",
											"",
											"                        pm.test(\"GET All Operation Type 1 exists with correct data\", function () {",
											"                            pm.expect(createdOpType1).to.exist;",
											"                            pm.expect(createdOpType1.name).to.equal(opTypePost1.name);",
											"                            pm.expect(createdOpType1.anesthesiaPatientPreparationInMinutes).to.equal(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"                            pm.expect(createdOpType1.surgeryInMinutes).to.equal(opTypePost1.surgeryInMinutes);",
											"                            pm.expect(createdOpType1.cleaningInMinutes).to.equal(opTypePost1.cleaningInMinutes);",
											"",
											"                            const cardiologist1 = createdOpType1.requiredStaff.find(staff => staff.specialization === \"Cardiology\");",
											"                            const anesthetist1 = createdOpType1.requiredStaff.find(staff => staff.specialization === \"Anaesthetist\");",
											"",
											"                            pm.expect(cardiologist1).to.exist;",
											"                            pm.expect(cardiologist1.total).to.equal(opTypePost1.requiredStaff[0].total);",
											"",
											"                            pm.expect(anesthetist1).to.exist;",
											"                            pm.expect(anesthetist1.total).to.equal(opTypePost1.requiredStaff[1].total);",
											"                        });",
											"",
											"                        pm.test(\"GET All Operation Type 2 exists with correct data\", function () {",
											"                            pm.expect(createdOpType2).to.exist;",
											"                            pm.expect(createdOpType2.name).to.equal(opTypePost2.name);",
											"                            pm.expect(createdOpType2.anesthesiaPatientPreparationInMinutes).to.equal(opTypePost2.anesthesiaPatientPreparationInMinutes);",
											"                            pm.expect(createdOpType2.surgeryInMinutes).to.equal(opTypePost2.surgeryInMinutes);",
											"                            pm.expect(createdOpType2.cleaningInMinutes).to.equal(opTypePost2.cleaningInMinutes);",
											"",
											"                            const cardiologist2 = createdOpType2.requiredStaff.find(staff => staff.specialization === \"Cardiology\");",
											"",
											"                            pm.expect(cardiologist2).to.exist;",
											"                            pm.expect(cardiologist2.total).to.equal(opTypePost2.requiredStaff[0].total);",
											"                        });",
											"",
											"                        // DELETE Operation Types",
											"                        pm.sendRequest({",
											"                            url: `https://localhost:5001/api/OperationTypes/${opTypePost1.id}/hard`,",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'Content-Type': 'application/json; charset=utf-8',",
											"                                'Authorization': `Bearer ${authToken}`",
											"                            }",
											"                        });",
											"                        pm.sendRequest({",
											"                            url: `https://localhost:5001/api/OperationTypes/${opTypePost2.id}/hard`,",
											"                            method: 'DELETE',",
											"                            header: {",
											"                                'Content-Type': 'application/json; charset=utf-8',",
											"                                'Authorization': `Bearer ${authToken}`",
											"                            }",
											"                        });",
											"                    }",
											"                });",
											"            });",
											"        });",
											"    });",
											"});",
											"//FALTA O DELETE DO SPECIALIZATION"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJEMkBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJEb2N0b3IiLCJqdGkiOiI4ODIzNTIxZi0wZDBhLTQ0ZDYtOWRiNC0yMGQ3ZDVjZDM5ZGIiLCJpYXQiOjE3Mjk2OTc0MjksIm5iZiI6MTcyOTY5NzQyOSwiZXhwIjoxNzI5OTU2NjI5LCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.YYriYHP6ue077c8_xWD73-hilYNTYnyFanD5-F5vwWQ",
										"description": "Other role",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImE2Yzc0NzczLTg2YTEtNGYyOC05M2FjLWVlYmZlNjlhNzYwYSIsImlhdCI6MTcyOTcwNDA5MCwibmJmIjoxNzI5NzA0MDkwLCJleHAiOjE3Mjk5NjMyOTAsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.H9o_qXZcbdUwIX0t1A8LwG_ZVU8M5plkjgNViibuiOA",
										"description": "Admin",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										""
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GET OperationType Filter By Name Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePost1 = pm.environment.get(\"op1\");",
											"const opTypePos2 = pm.environment.get(\"op2\");",
											"",
											"const opTypes = pm.response.json();",
											"",
											"pm.test(\"GET Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"GET Operation Types response is an array\", function () {",
											"    pm.expect(opTypes).to.be.an(\"array\");",
											"});",
											"",
											"pm.test(\"GET Operation Types response is an array with at least 1 items\", function () {",
											"    pm.expect(opTypes.length).to.be.at.least(1);",
											"});",
											"",
											"pm.test(\"GET Operation Type 1 exists with correct data\", function () {",
											"    const createdOpType1 = opTypes.find(type => type.id === opTypePost1.id);",
											"",
											"    pm.expect(createdOpType1).to.exist;",
											"    pm.expect(createdOpType1.name).to.equal(opTypePost1.name);",
											"    pm.expect(createdOpType1.anesthesiaPatientPreparationInMinutes).to.equal(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"    pm.expect(createdOpType1.surgeryInMinutes).to.equal(opTypePost1.surgeryInMinutes);",
											"    pm.expect(createdOpType1.cleaningInMinutes).to.equal(opTypePost1.cleaningInMinutes);",
											"",
											"    const anesthetist1 = createdOpType1.requiredStaff.find(staff => staff.specialization === \"Anaesthetist\");",
											"",
											"    pm.expect(anesthetist1).to.exist;",
											"    pm.expect(anesthetist1.total).to.equal(opTypePost1.requiredStaff[0].total);",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePost1.id}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePos2.id}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"name1\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    pm.environment.set(\"op1\", opTypePost1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"NUMERO2\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost2 = res.json();\r",
											"    pm.environment.set(\"op2\", opTypePost2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJEMkBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJEb2N0b3IiLCJqdGkiOiI4ODIzNTIxZi0wZDBhLTQ0ZDYtOWRiNC0yMGQ3ZDVjZDM5ZGIiLCJpYXQiOjE3Mjk2OTc0MjksIm5iZiI6MTcyOTY5NzQyOSwiZXhwIjoxNzI5OTU2NjI5LCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.YYriYHP6ue077c8_xWD73-hilYNTYnyFanD5-F5vwWQ",
										"description": "Other role",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImE2Yzc0NzczLTg2YTEtNGYyOC05M2FjLWVlYmZlNjlhNzYwYSIsImlhdCI6MTcyOTcwNDA5MCwibmJmIjoxNzI5NzA0MDkwLCJleHAiOjE3Mjk5NjMyOTAsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.H9o_qXZcbdUwIX0t1A8LwG_ZVU8M5plkjgNViibuiOA",
										"description": "Admin",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/?name=name1",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "name1"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GET OperationType Filter By Name Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePost1 = pm.environment.get(\"op1\");",
											"const opTypePos2 = pm.environment.get(\"op2\");",
											"",
											"",
											"pm.test(\"GET Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePost1.id}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePos2.id}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"name1\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    pm.environment.set(\"op1\", opTypePost1);\r",
											"});\r",
											"\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"NUMERO2\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost2 = res.json();\r",
											"    pm.environment.set(\"op2\", opTypePost2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"connection": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJEMkBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJEb2N0b3IiLCJqdGkiOiI4ODIzNTIxZi0wZDBhLTQ0ZDYtOWRiNC0yMGQ3ZDVjZDM5ZGIiLCJpYXQiOjE3Mjk2OTc0MjksIm5iZiI6MTcyOTY5NzQyOSwiZXhwIjoxNzI5OTU2NjI5LCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.YYriYHP6ue077c8_xWD73-hilYNTYnyFanD5-F5vwWQ",
										"description": "Other role",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImE2Yzc0NzczLTg2YTEtNGYyOC05M2FjLWVlYmZlNjlhNzYwYSIsImlhdCI6MTcyOTcwNDA5MCwibmJmIjoxNzI5NzA0MDkwLCJleHAiOjE3Mjk5NjMyOTAsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.H9o_qXZcbdUwIX0t1A8LwG_ZVU8M5plkjgNViibuiOA",
										"description": "Admin",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/?name=asdasdasdsa",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										""
									],
									"query": [
										{
											"key": "name",
											"value": "asdasdasdsa"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "POST OperationType Valid Data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 201 when operation type is successfuly created\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// POST specialization 1",
											"pm.sendRequest({",
											"    url: 'https://localhost:5001/api/specializations/',",
											"    method: 'POST',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    },",
											"    body: {",
											"        mode: 'raw',",
											"        raw: JSON.stringify({",
											"            \"name\": \"Anaesthetist\"",
											"        })",
											"    }",
											"}, function (err, res) {",
											"",
											"    spec1 = res.json();",
											"",
											"        // GET By id ",
											"        pm.sendRequest({",
											"            url: 'https://localhost:5001/api/OperationTypes/' + opTypePost1.id,",
											"            method: 'GET',",
											"            header: {",
											"                'Content-Type': 'application/json; charset=utf-8',",
											"                'Authorization': `Bearer ${authToken}`",
											"            }",
											"        }, function (err, res) {",
											"            let opTypes = res.json();",
											"",
											"            pm.test(\"POST Response contains expected fields\", function () {",
											"",
											"                pm.expect(opTypes).to.have.property('name');",
											"                pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"                pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"                pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"                pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"                pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"            });",
											"",
											"            pm.test(\"POST Operation Type is persisted correctly\", function () {",
											"                pm.expect(opTypes.id).to.eql(opTypePost1.id);",
											"                pm.expect(opTypes.name).to.eql(opTypePost1.name);",
											"                pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"                pm.expect(opTypes.surgeryInMinutes).to.eql(opTypePost1.surgeryInMinutes);",
											"                pm.expect(opTypes.cleaningInMinutes).to.eql(opTypePost1.cleaningInMinutes);",
											"                pm.expect(opTypes.requiredStaff[0].specialization).to.eql(opTypePost1.requiredStaff[0].specialization);",
											"                pm.expect(opTypes.requiredStaff[0].total).to.eql(opTypePost1.requiredStaff[0].total);",
											"            });",
											"            // DELETE Operation Types",
											"            pm.sendRequest({",
											"                url: `https://localhost:5001/api/OperationTypes/${opTypePost1.id}/hard`,",
											"                method: 'DELETE',",
											"                header: {",
											"                    'Content-Type': 'application/json; charset=utf-8',",
											"                    'Authorization': `Bearer ${authToken}`",
											"                }",
											"            });",
											"        });",
											"    });",
											"//FALTA O DELETE DO SPECIALIZATION"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 30,\n    \"surgeryInMinutes\": 120,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Invalid Anesthesia duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The anesthesia/preparation duration must be more than 0 minutes.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 0,\n    \"surgeryInMinutes\": 120,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Invalid Surgery duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The surgery duration must be more than 0 minutes.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": -10,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Invalid Cleaning duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The cleaning duration must be more than 0 minutes.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": -100,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Invalid Specification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: There is no specialization with the name nonExistente.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 32,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"nonExistente\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Invalid Specification total",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The total number of required staff of a specialization can't be lower or equal to 0.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 32,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 0\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Duplicated Specification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Can't have duplicate specializations -> Anaesthetist.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 32,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        },\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Empty Required Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The operation type must have at least one required staff.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 32,\n    \"requiredStaff\": [\n        \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST OperationType Null Required Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"let spec1;",
											"const opTypePost1 = pm.response.json();",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"POST Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Required Staff can't be null.\" });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Operation Type P\",\n    \"anesthesiaPatientPreparationInMinutes\": 2,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 32\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"PUT Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"PUT Response contains expected fields\", function () {",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes).to.have.property('name');",
											"    pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"    pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"    pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"});",
											"",
											"pm.test(\"PUT Operation Type is updated correctly\", function () {",
											"",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes.name).to.eql(\"Put Operation\");",
											"    pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(30);",
											"    pm.expect(opTypes.surgeryInMinutes).to.eql(120);",
											"    pm.expect(opTypes.cleaningInMinutes).to.eql(30);",
											"    pm.expect(opTypes.requiredStaff[0].specialization).to.eql(\"Anaesthetist\");",
											"    pm.expect(opTypes.requiredStaff[0].total).to.eql(2);",
											"",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 30,\n    \"surgeryInMinutes\": 120,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Invalid Anesthesia Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type Anesthesia Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The anesthesia/preparation duration must be more than 0 minutes.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 0,\n    \"surgeryInMinutes\": 120,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Invalid Surgery Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type Surgery Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The surgery duration must be more than 0 minutes.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 0,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Invalid Cleaning Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type Cleaning Duration error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The cleaning duration must be more than 0 minutes.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Invalid Specification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type Invalid specification error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: There is no specialization with the name NAOEXISTESPEC.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 10,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"NAOEXISTESPEC\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Duplicated Specification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type duplicated specification error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Can't have duplicate specializations -> Anaesthetist.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 10,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        },\n        {\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 2\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Empty Required Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type empty required staff error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Required staff can't be empty.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 10,\n    \"requiredStaff\": [\n        \n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Null Required Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type null required staff error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Required staff can't be empty.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"POST Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `https://localhost:5001/api/OperationTypes/`+ opTypePost1Id +`/hard`,\r",
											"        method: 'DELETE',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json; charset=utf-8',\r",
											"            'Authorization': `Bearer ${authToken}`\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT OperationType Invalid because inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePost1 = pm.environment.get(\"id\");",
											"",
											"pm.test(\"PUT Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PUT Operation Type inactive error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Can't update an inactive operation type.\" });",
											"});",
											"",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/` + opTypePost1 + `/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `https://localhost:5001/api/OperationTypes/`+ opTypePost1Id,\r",
											"        method: 'DELETE',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json; charset=utf-8',\r",
											"            'Authorization': `Bearer ${authToken}`\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Put Operation\",\n    \"anesthesiaPatientPreparationInMinutes\": 12,\n    \"surgeryInMinutes\": 12,\n    \"cleaningInMinutes\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Change Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"const opTypePost1 = pm.environment.get(\"opTypePost1\");",
											"",
											"console.log(opTypePost1);",
											"",
											"pm.test(\"PATCH Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"PATCH Response contains expected fields\", function () {",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes).to.have.property('name');",
											"    pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"    pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"    pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"});",
											"",
											"pm.test(\"PATCH Operation Type is updated correctly\", function () {",
											"",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes.name).to.eql(\"Patch Operation\");",
											"    pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"    pm.expect(opTypes.surgeryInMinutes).to.eql(opTypePost1.surgeryInMinutes);",
											"    pm.expect(opTypes.cleaningInMinutes).to.eql(opTypePost1.cleaningInMinutes);",
											"    pm.expect(opTypes.requiredStaff[0].specialization).to.eql(opTypePost1.requiredStaff[0].specialization);",
											"    pm.expect(opTypes.requiredStaff[0].total).to.eql(opTypePost1.requiredStaff[0].total);",
											"",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"    pm.environment.set(\"opTypePost1\", opTypePost1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Patch Operation\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Change Anesthesia Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"const opTypePost1 = pm.environment.get(\"opTypePost1\");",
											"",
											"console.log(opTypePost1);",
											"",
											"pm.test(\"PATCH Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"PATCH Response contains expected fields\", function () {",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes).to.have.property('name');",
											"    pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"    pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"    pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"});",
											"",
											"pm.test(\"PATCH Operation Type is updated correctly\", function () {",
											"",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes.name).to.eql(opTypePost1.name);",
											"    pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(50);",
											"    pm.expect(opTypes.surgeryInMinutes).to.eql(opTypePost1.surgeryInMinutes);",
											"    pm.expect(opTypes.cleaningInMinutes).to.eql(opTypePost1.cleaningInMinutes);",
											"    pm.expect(opTypes.requiredStaff[0].specialization).to.eql(opTypePost1.requiredStaff[0].specialization);",
											"    pm.expect(opTypes.requiredStaff[0].total).to.eql(opTypePost1.requiredStaff[0].total);",
											"",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"    pm.environment.set(\"opTypePost1\", opTypePost1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"anesthesiaPatientPreparationInMinutes\": 50\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Change Surgery Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"const opTypePost1 = pm.environment.get(\"opTypePost1\");",
											"",
											"console.log(opTypePost1);",
											"",
											"pm.test(\"PATCH Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"PATCH Response contains expected fields\", function () {",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes).to.have.property('name');",
											"    pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"    pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"    pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"});",
											"",
											"pm.test(\"PATCH Operation Type is updated correctly\", function () {",
											"",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes.name).to.eql(opTypePost1.name);",
											"    pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"    pm.expect(opTypes.surgeryInMinutes).to.eql(120);",
											"    pm.expect(opTypes.cleaningInMinutes).to.eql(opTypePost1.cleaningInMinutes);",
											"    pm.expect(opTypes.requiredStaff[0].specialization).to.eql(opTypePost1.requiredStaff[0].specialization);",
											"    pm.expect(opTypes.requiredStaff[0].total).to.eql(opTypePost1.requiredStaff[0].total);",
											"",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"    pm.environment.set(\"opTypePost1\", opTypePost1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"surgeryInMinutes\": 120\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Change Cleaning Duration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"const opTypePost1 = pm.environment.get(\"opTypePost1\");",
											"",
											"console.log(opTypePost1);",
											"",
											"pm.test(\"PATCH Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"PATCH Response contains expected fields\", function () {",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes).to.have.property('name');",
											"    pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"    pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"    pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"});",
											"",
											"pm.test(\"PATCH Operation Type is updated correctly\", function () {",
											"",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes.name).to.eql(opTypePost1.name);",
											"    pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"    pm.expect(opTypes.surgeryInMinutes).to.eql(opTypePost1.surgeryInMinutes);",
											"    pm.expect(opTypes.cleaningInMinutes).to.eql(30);",
											"    pm.expect(opTypes.requiredStaff[0].specialization).to.eql(opTypePost1.requiredStaff[0].specialization);",
											"    pm.expect(opTypes.requiredStaff[0].total).to.eql(opTypePost1.requiredStaff[0].total);",
											"",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"    pm.environment.set(\"opTypePost1\", opTypePost1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cleaningInMinutes\": 30\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Change Required Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"const opTypePost1 = pm.environment.get(\"opTypePost1\");",
											"",
											"console.log(opTypePost1);",
											"",
											"pm.test(\"PATCH Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"PATCH Response contains expected fields\", function () {",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes).to.have.property('name');",
											"    pm.expect(opTypes).to.have.property('anesthesiaPatientPreparationInMinutes');",
											"    pm.expect(opTypes).to.have.property('surgeryInMinutes');",
											"    pm.expect(opTypes).to.have.property('cleaningInMinutes');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('specialization');",
											"    pm.expect(opTypes.requiredStaff[0]).to.have.property('total');",
											"});",
											"",
											"pm.test(\"PATCH Operation Type is updated correctly\", function () {",
											"",
											"    var opTypes = pm.response.json();",
											"",
											"    pm.expect(opTypes.name).to.eql(opTypePost1.name);",
											"    pm.expect(opTypes.anesthesiaPatientPreparationInMinutes).to.eql(opTypePost1.anesthesiaPatientPreparationInMinutes);",
											"    pm.expect(opTypes.surgeryInMinutes).to.eql(opTypePost1.surgeryInMinutes);",
											"    pm.expect(opTypes.cleaningInMinutes).to.eql(opTypePost1.cleaningInMinutes);",
											"    pm.expect(opTypes.requiredStaff[0].specialization).to.eql(\"Cardiology\");",
											"    pm.expect(opTypes.requiredStaff[0].total).to.eql(5);",
											"    pm.expect(opTypes.requiredStaff[1].specialization).to.eql(\"Anaesthetist\");",
											"    pm.expect(opTypes.requiredStaff[1].total).to.eql(7);",
											"",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${opTypePostID}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    console.log(opTypePost1Id);\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"    pm.environment.set(\"opTypePost1\", opTypePost1);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Cardiology\",\n            \"total\": 5\n        },{\n            \"specialization\": \"Anaesthetist\",\n            \"total\": 7\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Not Found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePostID = pm.environment.get(\"id\");",
											"",
											"pm.test(\"PATCH Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `https://localhost:5001/api/OperationTypes/`+ opTypePost1Id +`/hard`,\r",
											"        method: 'DELETE',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json; charset=utf-8',\r",
											"            'Authorization': `Bearer ${authToken}`\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Patch Operation\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PATCH OperationType Invalid because inactive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const opTypePost1Id = pm.environment.get(\"id\");",
											"",
											"pm.test(\"PATCH Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"PATCH Operation Type inactive error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Can't update an inactive operation type.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/` + opTypePost1Id + `/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePost1Id = opTypePost1.id;\r",
											"    pm.environment.set(\"id\", opTypePost1Id);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `https://localhost:5001/api/OperationTypes/`+ opTypePost1Id,\r",
											"        method: 'DELETE',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json; charset=utf-8',\r",
											"            'Authorization': `Bearer ${authToken}`\r",
											"        }\r",
											"    }, function (err, res) {\r",
											"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"surgeryInMinutes\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "DELETE OperationType Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const op1 = pm.environment.get(\"op1\");",
											"",
											"pm.test(\"DELETE Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.sendRequest({",
											"    url: 'https://localhost:5001/api/OperationTypes/' + op1.id,",
											"    method: 'GET',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"}, function (err, res) {",
											"    if (err) {",
											"        console.error(err);",
											"    } else {",
											"        let opTypes = res.json();",
											"",
											"        pm.test(\"DELETE Operation Type inactivated\", function () {",
											"            pm.expect(opTypes).to.exist;",
											"            pm.expect(opTypes.active).to.equal(false);",
											"",
											"        });",
											"",
											"",
											"        pm.sendRequest({",
											"            url: `https://localhost:5001/api/OperationTypes/${op1.id}/hard`,",
											"            method: 'DELETE',",
											"            header: {",
											"                'Content-Type': 'application/json; charset=utf-8',",
											"                'Authorization': `Bearer ${authToken}`",
											"            }",
											"        });",
											"    }",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePostId = opTypePost1.id;\r",
											"    pm.environment.set(\"op1\", opTypePost1);\r",
											"    pm.environment.set(\"id\", opTypePostId);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "DELETE OperationType Invalid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const op1 = pm.environment.get(\"op1\");",
											"",
											"pm.test(\"DELETE Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"DELETE Operation Type already inactive error\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The operation type is already inactive.\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/OperationTypes/${op1.id}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											"",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: 'https://localhost:5001/api/OperationTypes/',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"bea\",\r",
											"            \"anesthesiaPatientPreparationInMinutes\": 1,\r",
											"            \"surgeryInMinutes\": 1,\r",
											"            \"cleaningInMinutes\": 10,\r",
											"            \"requiredStaff\": [\r",
											"                { \"specialization\": \"Anaesthetist\", \"total\": 1 }\r",
											"            ]\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"\r",
											"    const opTypePost1 = res.json();\r",
											"    const opTypePostId = opTypePost1.id;\r",
											"    pm.environment.set(\"op1\", opTypePost1);\r",
											"    pm.environment.set(\"id\", opTypePostId);\r",
											"\r",
											"    pm.sendRequest({\r",
											"        url: `https://localhost:5001/api/OperationTypes/${opTypePostId}`,\r",
											"        method: 'DELETE',\r",
											"        header: {\r",
											"            'Content-Type': 'application/json; charset=utf-8',\r",
											"            'Authorization': `Bearer ${authToken}`\r",
											"        }\r",
											"    });\r",
											"\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/OperationTypes/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"OperationTypes",
										"{{id}}"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "GET All OperationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJEMkBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJEb2N0b3IiLCJqdGkiOiI4ODIzNTIxZi0wZDBhLTQ0ZDYtOWRiNC0yMGQ3ZDVjZDM5ZGIiLCJpYXQiOjE3Mjk2OTc0MjksIm5iZiI6MTcyOTY5NzQyOSwiZXhwIjoxNzI5OTU2NjI5LCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.YYriYHP6ue077c8_xWD73-hilYNTYnyFanD5-F5vwWQ",
								"description": "Other role",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImE2Yzc0NzczLTg2YTEtNGYyOC05M2FjLWVlYmZlNjlhNzYwYSIsImlhdCI6MTcyOTcwNDA5MCwibmJmIjoxNzI5NzA0MDkwLCJleHAiOjE3Mjk5NjMyOTAsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.H9o_qXZcbdUwIX0t1A8LwG_ZVU8M5plkjgNViibuiOA",
								"description": "Admin",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								""
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET OperationType by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 when ID exists\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 400 when ID doesnt exists\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response contains expected fields\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('anesthesiaPatientPreparationInMinutes');",
									"    pm.expect(jsonData).to.have.property('surgeryInMinutes');",
									"    pm.expect(jsonData).to.have.property('cleaningInMinutes');",
									"    pm.expect(jsonData).to.have.property('requiredStaff');",
									"",
									"    pm.expect(jsonData.requiredStaff[0]).to.have.property('specialization');",
									"    pm.expect(jsonData.requiredStaff[0]).to.have.property('total');",
									"});",
									"",
									"",
									"pm.test(\"Data matches expected values\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData.id).to.eql(\"e8640b73-167f-4bcc-b0ef-46a14d8b2c45\");",
									"    pm.expect(jsonData.name).to.eql(\"Operation Type A\");",
									"    pm.expect(jsonData.anesthesiaPatientPreparationInMinutes).to.eql(30);",
									"    pm.expect(jsonData.surgeryInMinutes).to.eql(120);",
									"    pm.expect(jsonData.cleaningInMinutes).to.eql(30);",
									"",
									"    pm.expect(jsonData.requiredStaff[0].specialization).to.eql(\"Anestesista\");",
									"    pm.expect(jsonData.requiredStaff[0].total).to.eql(5);",
									"",
									"    pm.expect(jsonData.requiredStaff[1].specialization).to.eql(\"Cardiologista\");",
									"    pm.expect(jsonData.requiredStaff[1].total).to.eql(2);",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "e8640b73-167f-4bcc-b0ef-46a14d8b2c45"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET OperationType Filter By",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response body contains an array of resources\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"    pm.expect(jsonData.length).to.be.greaterThan(0);",
									"});",
									"",
									"pm.test(\"Response contains operation type fields\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    jsonData.forEach(item => {",
									"",
									"        pm.expect(item).to.have.property('id');",
									"        pm.expect(item).to.have.property('name');",
									"        pm.expect(item).to.have.property('anesthesiaPatientPreparationInMinutes');",
									"        pm.expect(item).to.have.property('surgeryInMinutes');",
									"        pm.expect(item).to.have.property('cleaningInMinutes');",
									"        pm.expect(item).to.have.property('requiredStaff');",
									"",
									"        pm.expect(item.requiredStaff).to.be.an('array');",
									"",
									"        item.requiredStaff.forEach(staff => {",
									"            pm.expect(staff).to.have.property('specialization');",
									"            pm.expect(staff).to.have.property('total');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"Operation Type has expected data\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData[0].id).to.eql(\"2469f2ca-9af7-4447-ac47-baa0f9f48982\");  ",
									"    pm.expect(jsonData[0].name).to.eql(\"string\");  ",
									"    pm.expect(jsonData[0].anesthesiaPatientPreparationInMinutes).to.eql(1);  ",
									"    pm.expect(jsonData[0].surgeryInMinutes).to.eql(1);  ",
									"    pm.expect(jsonData[0].cleaningInMinutes).to.eql(1);  ",
									"",
									"    pm.expect(jsonData[0].requiredStaff[0].specialization).to.eql(\"pes\");  ",
									"    pm.expect(jsonData[0].requiredStaff[0].total).to.eql(1);  ",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"connection": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJEMkBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJEb2N0b3IiLCJqdGkiOiI4ODIzNTIxZi0wZDBhLTQ0ZDYtOWRiNC0yMGQ3ZDVjZDM5ZGIiLCJpYXQiOjE3Mjk2OTc0MjksIm5iZiI6MTcyOTY5NzQyOSwiZXhwIjoxNzI5OTU2NjI5LCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.YYriYHP6ue077c8_xWD73-hilYNTYnyFanD5-F5vwWQ",
								"description": "Other role",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImE2Yzc0NzczLTg2YTEtNGYyOC05M2FjLWVlYmZlNjlhNzYwYSIsImlhdCI6MTcyOTcwNDA5MCwibmJmIjoxNzI5NzA0MDkwLCJleHAiOjE3Mjk5NjMyOTAsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.H9o_qXZcbdUwIX0t1A8LwG_ZVU8M5plkjgNViibuiOA",
								"description": "Admin",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/?specialization=Anaesthetist",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								""
							],
							"query": [
								{
									"key": "specialization",
									"value": "Anaesthetist"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "POST OperationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const a = pm.response.json();",
									"",
									"console.log(a);",
									"",
									"pm.test(\"Status code is 201 when operation type is successfuly created\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Status code is 400 when operation type is not created\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									"pm.test(\"Response contains expected fields\", function () {",
									"    const jsonData = pm.response.json();",
									"",
									"    pm.expect(jsonData).to.have.property('name');",
									"    pm.expect(jsonData).to.have.property('anesthesiaPatientPreparationInMinutes');",
									"    pm.expect(jsonData).to.have.property('surgeryInMinutes');",
									"    pm.expect(jsonData).to.have.property('cleaningInMinutes');",
									"    pm.expect(jsonData.requiredStaff[0]).to.have.property('specialization');",
									"    pm.expect(jsonData.requiredStaff[0]).to.have.property('total');",
									"    pm.expect(jsonData.requiredStaff[1]).to.have.property('specialization');",
									"    pm.expect(jsonData.requiredStaff[1]).to.have.property('total');",
									"});",
									"",
									"pm.test(\"Operation Type Name is already being used\", function () {",
									"    pm.response.to.have.body({ \"message\": \"Error: This operation type name is already being used.\" });",
									"});",
									"",
									"const createdResource = pm.response.json();",
									"const createdId = createdResource.id;",
									"",
									"pm.sendRequest({",
									"    url: 'https://localhost:5001/api/OperationTypes/' + createdId,",
									"    method: 'GET',",
									"    header: {",
									"        'Content-Type': 'application/json; charset=utf-8'",
									"    }",
									"}, function (err, res) {",
									"    if (err) {",
									"        console.log(err);",
									"    } else {",
									"        const getData = res.json();",
									"",
									"        pm.test(\"Operation Type is persisted correctly\", function () {",
									"            pm.expect(getData.id).to.eql(createdId);",
									"            pm.expect(getData.name).to.eql(createdResource.name);",
									"            pm.expect(getData.anesthesiaPatientPreparationInMinutes).to.eql(30);",
									"            pm.expect(getData.surgeryInMinutes).to.eql(120);",
									"            pm.expect(getData.cleaningInMinutes).to.eql(30);",
									"            pm.expect(getData.requiredStaff[0].specialization).to.eql(\"Anestesista\");",
									"            pm.expect(getData.requiredStaff[0].total).to.eql(5);",
									"            pm.expect(getData.requiredStaff[1].specialization).to.eql(\"Cardiologista\");",
									"            pm.expect(getData.requiredStaff[1].total).to.eql(2);",
									"        });",
									"    }",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjJjYzJjMWNlLTBkOTAtNGMzOS1hODkzLTFmYjU4ZDc5MDc3YiIsImlhdCI6MTcyOTc3NDYwOCwibmJmIjoxNzI5Nzc0NjA4LCJleHAiOjE3MzAwMzM4MDgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.iPC1LGBpyS9b2cSGr9Gb1RIblBCz436fvPXIDq8qz5k",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Operation Type q\",\n    \"anesthesiaPatientPreparationInMinutes\": 30,\n    \"surgeryInMinutes\": 120,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"Anestesista\",\n            \"total\": 2\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "PUT OperationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"put\",\n    \"anesthesiaPatientPreparationInMinutes\": 30,\n    \"surgeryInMinutes\": 20,\n    \"cleaningInMinutes\": 30,\n    \"requiredStaff\": [\n        {\n            \n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "8d05f581-824d-43da-b2c2-2157594cfd26"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "PATCH OperationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"requiredStaff\": [\n        {\n            \"specialization\": \"sds\",\n            \"total\": 3\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "22061e6e-935c-48ca-99ec-295385a552ec"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "DELETE OperationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3579a47b-d767-47c4-aa6a-3f9f4edae3db"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "DELETE hard OperationType",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationTypes/:id/hard",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationTypes",
								":id",
								"hard"
							],
							"variable": [
								{
									"key": "id",
									"value": "aa1687ee-a9e7-4c23-bdfe-21d91b5caf2e"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Staff",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "GET Test All Staff",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response body contains an array of resources\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Response contains staff fields\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    jsonData.forEach(item => {",
											"",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('name');",
											"        pm.expect(item).to.have.property('licenseNumber');",
											"        pm.expect(item).to.have.property('email');",
											"        pm.expect(item).to.have.property('phone');",
											"        pm.expect(item).to.have.property('specialization');",
											"        pm.expect(item).to.have.property('availabilitySlots');",
											"        pm.expect(item).to.have.property('role');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "GET Test Staff By Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response time is less than 1000ms\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);",
											"});",
											"",
											"pm.test(\"Response body contains only one staff\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.length).to.be.eql(1);",
											"});",
											"",
											"pm.test(\"Response contains staff fields\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    jsonData.forEach(item => {",
											"",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('name');",
											"        pm.expect(item).to.have.property('licenseNumber');",
											"        pm.expect(item).to.have.property('email');",
											"        pm.expect(item).to.have.property('phone');",
											"        pm.expect(item).to.have.property('specialization');",
											"        pm.expect(item).to.have.property('availabilitySlots');",
											"        pm.expect(item).to.have.property('role');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5001/api/Staff?email=T20225@healthcareapp.com",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									],
									"query": [
										{
											"key": "email",
											"value": "T20225@healthcareapp.com"
										}
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 201 when staff is successfuly created\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"pm.test(\"Values are correct when POST staff\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Ana Costa\");",
											"    pm.expect(jsonData.licenseNumber).to.eql(3522243);",
											"    pm.expect(jsonData.phone).to.eql(\"934235293\");",
											"    pm.expect(jsonData.specialization).to.eql(\"Dermatology\");",
											"    pm.expect(jsonData.role).to.eql(\"Nurse\");",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/Staff/${staff1.id}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"Ana Costa\",\n\"licenseNumber\" : 3522243,\n\"phone\" : \"934235293\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Null Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff's name is null\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with null name\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The staff must have a name!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"licensenumber\" : \"3\",\n\"phone\" : \"933282266\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Used License Num",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff's license num is already used\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with used license num\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: This License number is already in use!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"45613\",\n\"phone\" : \"929242639\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Short Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff's phone is too short\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with short phone number\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The phone number is invalid!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"8\",\n\"phone\" : \"9384266\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Used Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff's phone already used\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with used phone number\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: This phone number is already in use!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"3\",\n\"phone\" : \"929244339\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Non-existent Spec",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff specialization doesn't exist\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with non existent specialization\", function () {",
											"    pm.response.to.have.body({ \"message\":\"Error: There is no specialization with the name spec.\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"Ana Costa\",\n\"licenseNumber\" : 35643,\n\"phone\" : \"933236193\",\n\"specialization\" : \"spec\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Invalid Availability Slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the availability slot format is invalid\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with invalid availability slot\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: Invalid Availability slot format!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"3\",\n\"phone\" : \"933282266\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00,2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Future Availability Slot",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the availability slot start date is after the end date\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with start date after end date in availability slot\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The end time must be after the start time!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"3\",\n\"phone\" : \"933282266\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2025-11-10T12:00:00/2024-11-11T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Wrong Role",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff's role is wrong\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with wrong role\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The staff role must be one of the following: Doctor, Nurse or Tech!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"3\",\n\"phone\" : \"933282266\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Patient\",\n\"recruitmentYear\" : \"2024\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Staff Negative Year",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const staff1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the staff's recruitment year is negative\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"pm.test(\"POST Staff with negative recruitment year\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: The year must be bigger than zero!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"name\" : \"ana costa\",\n\"licensenumber\" : \"3\",\n\"phone\" : \"933282266\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"-1\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "PUT Test Staff Valid",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://localhost:5001/api/Staff`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"Ana Costa\",\r",
											"            \"licenseNumber\": 33333643,\r",
											"            \"phone\": \"932533193\",\r",
											"            \"specialization\": \"Dermatology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\r",
											"            \"role\": \"Nurse\",\r",
											"            \"recruitmentYear\": \"2024\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Erro ao criar o staff:\", err);\r",
											"    } else {\r",
											"        const staff1 = res.json();\r",
											"        const staffId = staff1.id;\r",
											"        pm.environment.set(\"id\", staffId);\r",
											"        \r",
											"        const body = {\r",
											"            \"id\": staffId,\r",
											"            \"phone\" : \"932533293\",\r",
											"            \"specialization\": \"Dermatology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"]\r",
											"        };\r",
											"\r",
											"        pm.request.body.raw=JSON.stringify(body);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const staffId = pm.environment.get(\"id\");",
											"",
											"pm.test(\"Status code is 200 when editing phone\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Values are correct when PUT phone\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Ana Costa\");",
											"    pm.expect(jsonData.licenseNumber).to.eql(33333643);",
											"    pm.expect(jsonData.phone).to.eql(\"932533293\");",
											"    pm.expect(jsonData.specialization).to.eql(\"Dermatology\");",
											"    pm.expect(jsonData.role).to.eql(\"Nurse\");",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/Staff/${staffId}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT Test Staff Null Phone",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://localhost:5001/api/Staff`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"Ana Costa\",\r",
											"            \"licenseNumber\": 33333643,\r",
											"            \"phone\": \"932533193\",\r",
											"            \"specialization\": \"Dermatology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\r",
											"            \"role\": \"Nurse\",\r",
											"            \"recruitmentYear\": \"2024\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Erro ao criar o staff:\", err);\r",
											"    } else {\r",
											"        const staff1 = res.json();\r",
											"        const staffId = staff1.id;\r",
											"\r",
											"        pm.environment.set(\"id\", staffId);\r",
											"        \r",
											"        const body = {\r",
											"            \"id\": staffId,\r",
											"            \"specialization\": \"Dermatology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"]\r",
											"        };\r",
											"\r",
											"        pm.request.body.raw=JSON.stringify(body);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"const staffId = pm.environment.get(\"id\");\r",
											"\r",
											"pm.test(\"Status code is 400 when editing staff with null phone\", function () {\r",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);\r",
											"});\r",
											"\r",
											"pm.test(\"PUT Staff with null phone num\", function () {\r",
											"    pm.response.to.have.body({ \"message\": \"Error: The staff must have a phone number!\" });\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://localhost:5001/api/Staff/${staffId}/hard`,\r",
											"    method: 'DELETE',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff",
										"{{id}}"
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PUT Test Staff Non-existent",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"pm.test(\"Status code is 404 when editing non existent staff\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([404]);",
											"});",
											"",
											"pm.test(\"PUT Staff for non existent staff\", function () {",
											"    pm.response.to.have.body({  \"message\": \"There's no Staff with that ID!\" });",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"id\" : \"016781ea-308d-42bc-9645-ca5a4166c999\",\r\n\"phone\" : \"924999316\",\r\n\"specialization\" : \"Dermatology\",\r\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff/:id",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "016781ea-308d-42bc-9645-ca5a4166c999"
										}
									]
								},
								"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
							},
							"response": []
						},
						{
							"name": "PATCH Test Staff Null Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const staffId = pm.environment.get(\"id\");",
											"",
											"pm.test(\"Status code is 200 when partial editing null phone\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([200]);",
											"});",
											"",
											"pm.test(\"Values are correct Patch null phone\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.name).to.eql(\"Ana Costa\");",
											"    pm.expect(jsonData.licenseNumber).to.eql(33333643);",
											"    pm.expect(jsonData.phone).to.eql(\"932533193\");",
											"    pm.expect(jsonData.specialization).to.eql(\"Cardiology\");",
											"    pm.expect(jsonData.role).to.eql(\"Nurse\");",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/Staff/${staffId}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://localhost:5001/api/Staff`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"Ana Costa\",\r",
											"            \"licenseNumber\": 33333643,\r",
											"            \"phone\": \"932533193\",\r",
											"            \"specialization\": \"Dermatology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\r",
											"            \"role\": \"Nurse\",\r",
											"            \"recruitmentYear\": \"2024\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Erro ao criar o staff:\", err);\r",
											"    } else {\r",
											"        const staff1 = res.json();\r",
											"        const staffId = staff1.id;\r",
											"\r",
											"        pm.environment.set(\"id\", staffId);\r",
											"\r",
											"        const body = {\r",
											"            \"id\": staffId,\r",
											"            \"specialization\": \"Cardiology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"]\r",
											"        };\r",
											"\r",
											"        pm.request.body.raw = JSON.stringify(body);\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff",
										"{{id}}"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "DEACTIVATE Test Already Deactivated",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"const staffId = pm.environment.get(\"id\");",
											"",
											"pm.test(\"Status code is 400 when deactivating already deactivated staff\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"pm.test(\"POST Staff with short phone number\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: This Staff profile is already deactivated!\" });",
											"});",
											"",
											"pm.sendRequest({",
											"    url: `https://localhost:5001/api/Staff/${staffId}/hard`,",
											"    method: 'DELETE',",
											"    header: {",
											"        'Content-Type': 'application/json; charset=utf-8',",
											"        'Authorization': `Bearer ${authToken}`",
											"    }",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: `https://localhost:5001/api/Staff`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json; charset=utf-8',\r",
											"        'Authorization': `Bearer ${authToken}`\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"name\": \"Ana Costa\",\r",
											"            \"licenseNumber\": 33233643,\r",
											"            \"phone\": \"982533293\",\r",
											"            \"specialization\": \"Dermatology\",\r",
											"            \"availabilitySlots\": [\"2024-11-10T12:00:00/2024-11-11T15:00:00\", \"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\r",
											"            \"role\": \"Nurse\",\r",
											"            \"recruitmentYear\": \"2024\"\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.error(\"Erro ao criar o staff:\", err);\r",
											"    } else {\r",
											"        const staff1 = res.json();\r",
											"        const staffId = staff1.id;\r",
											"\r",
											"        pm.environment.set(\"id\", staffId);\r",
											"\r",
											"        pm.sendRequest({\r",
											"            url: `https://localhost:5001/api/Staff/${staffId}`,\r",
											"            method: 'DELETE',\r",
											"            header: {\r",
											"                'Content-Type': 'application/json; charset=utf-8',\r",
											"                'Authorization': `Bearer ${authToken}`\r",
											"            }\r",
											"        });\r",
											"\r",
											"    }\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Staff/{{id}}",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Staff",
										"{{id}}"
									]
								},
								"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "GET All Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/Staff",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET Staff by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJiZWFAaG90bWFpbC5jb20iLCJyb2xlIjoiQWRtaW4iLCJqdGkiOiIwYjk4ZmRiNC01MWZhLTQxY2EtODcwMi02NTBhNmJlYjYzZTEiLCJpYXQiOjE3Mjk3MjEzODksIm5iZiI6MTcyOTcyMTM4OSwiZXhwIjoxNzI5OTgwNTg5LCJpc3MiOiJBdXRoX0JhY2tPZmZpYyIsImF1ZCI6IkFVVEgifQ.62gb35CY3XB2FiCmPBlo-4WFLN_DnurcMZz_y6MoGfI",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/Staff/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "0a96068a-d34a-44fe-bf9e-a97f5de3fb1e"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "POST Staff Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"name\" : \"Anaaaaaaaaaaaa Costa\",\n\"licenseNumber\" : 132331,\n\"phone\" : \"919345279\",\n\"specialization\" : \"Ophthalmology\",\n\"availabilitySlots\" : [\"2024-10-10T12:00:00/2024-10-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"],\n\"role\" : \"Nurse\",\n\"recruitmentYear\" : \"2024\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Staff",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "PUT Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\" : \"3608be44-306b-4207-9f73-d80b3228040b\",\n\"phone\" : \"924425316\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Staff/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3608be44-306b-4207-9f73-d80b3228040b"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "PATCH Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\" : \"0a96068a-d34a-44fe-bf9e-a97f5de3fb1e\",\n\"phone\" : \"924429316\",\n\"specialization\" : \"Dermatology\",\n\"availabilitySlots\" : [\"2024-11-10T12:00:00/2024-11-11T15:00:00\",\"2024-10-14T12:00:00/2024-10-19T15:00:00\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Staff/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "0a96068a-d34a-44fe-bf9e-a97f5de3fb1e"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "DEACTIVATE Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Staff/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "3608be44-306b-4207-9f73-d80b3228040b"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "DELETE Staff",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Staff/:id/hard",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Staff",
								":id",
								"hard"
							],
							"variable": [
								{
									"key": "id",
									"value": "140e327e-9541-4a12-a5a3-c8f5b0a9fcb4"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Patient",
			"item": [
				{
					"name": "Tests",
					"item": [
						{
							"name": "GET Test All Patient",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"",
											"pm.test(\"Response body contains an array of resources\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.be.an('array');",
											"    pm.expect(jsonData.length).to.be.greaterThan(0);",
											"});",
											"",
											"pm.test(\"Response contains patient fields\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    jsonData.forEach(item => {",
											"",
											"        pm.expect(item).to.have.property('id');",
											"        pm.expect(item).to.have.property('firstName');",
											"        pm.expect(item).to.have.property('lastName');",
											"        pm.expect(item).to.have.property('fullName');",
											"        pm.expect(item).to.have.property('gender');",
											"        pm.expect(item).to.have.property('dateOfBirth');",
											"        pm.expect(item).to.have.property('email');",
											"        pm.expect(item).to.have.property('phone');",
											"        pm.expect(item).to.have.property('emergencyContact');",
											"        pm.expect(item).to.have.property('allergies');",
											"        pm.expect(item).to.have.property('medicalRecordNumber');",
											"    });",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "https://localhost:5001/api/Patient",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Patient"
									]
								},
								"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
							},
							"response": []
						},
						{
							"name": "POST Test Patient Valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const patient = pm.response.json();",
											"",
											"pm.test(\"Status code is 201 when staff is successfuly created\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
											"});",
											"",
											"pm.test(\"Values are correct when POST patient\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.firstName).to.eql(\"Bernardo\");",
											"    pm.expect(jsonData.lastName).to.eql(\"Silva\");",
											"    pm.expect(jsonData.fullName).to.eql(\"Bernardo Silva\");",
											"    pm.expect(jsonData.gender).to.eql(\"M\");",
											"    pm.expect(jsonData.dateOfBirth).to.eql(\"2024-10-27T15:41:28.659Z\");",
											"    pm.expect(jsonData.email).to.eql(\"bernardoSilva@gmail.com\");",
											"    pm.expect(jsonData.phone).to.eql(\"923105058\");",
											"    pm.expect(jsonData.emergencyContact).to.eql(\"944268055\");",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Bernardo\",\n  \"lastName\": \"Silva\",\n  \"fullName\": \"Bernardo Silva\",\n  \"gender\": \"M\",\n  \"dateOfBirth\": \"2024-10-27T15:41:28.659Z\",\n  \"email\": \"bernardoSilva@gmail.com\",\n  \"phone\": \"923105058\",\n  \"emergencyContact\": \"944268055\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Patient",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Patient"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Patient With Invalid Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const patient = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 for invalid email format\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Response contains validation error for email format\", function () {",
											"   pm.response.to.have.body({ \"message\": \"Error: The email is invalid!\" });",
											"",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Ruben\",\n  \"lastName\": \"Dias\",\n  \"fullName\": \"Ruben Dias\",\n  \"gender\": \"Masculine\",\n  \"dateOfBirth\": \"2000-10-27T15:41:28.659Z\",\n  \"email\": \"emailInvalido\",\n  \"phone\": \"993105058\",\n  \"emergencyContact\": \"944968055\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Patient",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Patient"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Patient With Invalid Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const patient = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 for invalid email format\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Response contains validation error for invalid phone number\", function () {",
											"   pm.response.to.have.body({ \"message\": \"Error: The phone number is invalid!\" });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Ruben\",\n  \"lastName\": \"Dias\",\n  \"fullName\": \"Ruben Dias\",\n  \"gender\": \"Masculine\",\n  \"dateOfBirth\": \"2000-10-27T15:41:28.659Z\",\n  \"email\": \"bernardo@gmail.com\",\n  \"phone\": \"188999000\",\n  \"emergencyContact\": \"944968055\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Patient",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Patient"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Patient Used Email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const patient1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the patient's email is already used\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"",
											"pm.test(\"POST Patient with used email\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: This email is already in use !!!\" });",
											"    ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Ruben\",\n  \"lastName\": \"Dias\",\n  \"fullName\": \"Ruben Dias\",\n  \"gender\": \"M\",\n  \"dateOfBirth\": \"2024-10-27T15:41:28.659Z\",\n  \"email\": \"bernardoSilva@gmail.com\",\n  \"phone\": \"901101150\",\n  \"emergencyContact\": \"944268100\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Patient",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Patient"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						},
						{
							"name": "POST Test Patient Used Phone",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const authToken = pm.collectionVariables.get(\"Authorization\");",
											"",
											"const patient1 = pm.response.json();",
											"",
											"pm.test(\"Status code is 400 when the patient's phone is already used\", function () {",
											"    pm.expect(pm.response.code).to.be.oneOf([400]);",
											"});",
											"",
											"",
											"pm.test(\"POST Patient with used phone Number\", function () {",
											"    pm.response.to.have.body({ \"message\": \"Error: This Phone Number is already in use !!!\" });",
											"    ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImQxYWI0MTkxLTEzODgtNDgxMC05MTQ5LWY4YjZkMDY5ZDdkZSIsImlhdCI6MTcyOTc4NzU2MywibmJmIjoxNzI5Nzg3NTYzLCJleHAiOjE3MzAwNDY3NjMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.kxRDYiFUwCoLVS1j0oZXaoAZAgzP6NuEOoFoSuZBglQ",
										"type": "text",
										"disabled": true
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Ruben\",\n  \"lastName\": \"Dias\",\n  \"fullName\": \"Ruben Dias\",\n  \"gender\": \"M\",\n  \"dateOfBirth\": \"2024-10-27T15:41:28.659Z\",\n  \"email\": \"outro@gmail.com\",\n  \"phone\": \"923105058\",\n  \"emergencyContact\": \"944268100\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://localhost:5001/api/Patient",
									"protocol": "https",
									"host": [
										"localhost"
									],
									"port": "5001",
									"path": [
										"api",
										"Patient"
									]
								},
								"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
							},
							"response": []
						}
					]
				},
				{
					"name": "GET Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Patient",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET Patient by Id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Patient/{id}",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient",
								"{id}"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "POST Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Rodri\",\n  \"lastName\": \"Hernandez\",\n  \"fullName\": \"Rodri Hernandez\",\n  \"gender\": \"M\",\n  \"dateOfBirth\": \"2024-10-27T15:41:28.659Z\",\n  \"email\": \"rodriBallonDor@gmail.com\",\n  \"phone\": \"933105058\",\n  \"emergencyContact\": \"944258055\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Patient",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "PUT Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Luis\",\n  \"lastName\": \"Reis\",\n  \"fullName\": \"Luis Reis\",\n  \"gender\": \"M\",\n  \"dateOfBirth\": \"2024-10-27T15:41:28.659Z\",\n  \"email\": \"lmr@gmail.com\",\n  \"phone\": \"919100055\",\n  \"emergencyContact\": \"929200055\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Patient/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient",
								":id"
							],
							"query": [
								{
									"key": "id",
									"value": "a83c0075-2b8d-49aa-b2e5-412b8670a4d0",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "fce8dbd9-bb63-4199-aac7-196718563363"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "PATCH Patient",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"Luisa\",\r\n  \"lastName\": \"Miranda\",\r\n  \"fullName\": \"Luisa Miranda\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Patient/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "fce8dbd9-bb63-4199-aac7-196718563363"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "DELETE Patient",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Patient/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "2cef205e-12f1-4378-abc2-f0b5c5731b32"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "GET Patient by Various Attributes",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Patient/SearchByVariousAttributes/?name=Rodri&dateOfBirth=2024-10-27T15:41:28.659Z",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Patient",
								"SearchByVariousAttributes",
								""
							],
							"query": [
								{
									"key": "name",
									"value": "Rodri"
								},
								{
									"key": "dateOfBirth",
									"value": "2024-10-27T15:41:28.659Z"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Patient and User",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserDto\": {\r\n    \"Role\": \"Admin\",\r\n    \"Email\": \"1221695@isep.ipp.pt\",\r\n    \"ConfirmationEmail\": \"1221695@isep.ipp.pt\"\r\n  },\r\n  \"PatientDto\": {\r\n    \"FirstName\": \"John\",\r\n    \"LastName\": \"Doe\",\r\n    \"FullName\": \"John Doe\",\r\n    \"Gender\": \"Male\",\r\n    \"DateOfBirth\": \"1990-01-01T00:00:00\",\r\n    \"Email\": \"1221695@isep.ipp.pt\",\r\n    \"Phone\": \"912345679\",  // Ensure the phone number is valid\r\n    \"EmergencyContact\": \"918620304\"\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5000/api/Users/createPatient",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"api",
								"Users",
								"createPatient"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Patient&User",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Users/deletePatient?email=1221695@isep.ipp.pt",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Users",
								"deletePatient"
							],
							"query": [
								{
									"key": "email",
									"value": "1221695@isep.ipp.pt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete Patient Request",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiYzI5NmJjYjMtZDVjYy00YmY1LTkzZGYtZDVjZDFmNzY1MjJkIiwiaWF0IjoxNzMwMDQ3ODI0LCJuYmYiOjE3MzAwNDc4MjQsImV4cCI6MTczMDMwNzAyNCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.bKtrrBi_XSUkWsgNTD8Uv0DdeyWrfacoaip5tUHCPWA",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Role\": \"Admin\",\r\n    \"Email\": \"1221695@isep.ipp.pt\",\r\n    \"ConfirmationEmail\": \"1221695@isep.ipp.pt\"\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Users/deletePatientRequest",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Users",
								"deletePatientRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH Patient as Patient",
					"request": {
						"method": "PATCH",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Get data Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Post data Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update data Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "POST Request Password Reset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Email\": \"1191583@isep.ipp.pt\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Users/reset-password",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Users",
								"reset-password"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "PATCH New Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Password\":\"A222222AAAAAAAAAAA!_1\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Users/new-password/?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiIxMTkxNTgzQGlzZXAuaXBwLnB0IiwiZXhwIjoxNzI5OTY5NzUzLCJpc3MiOiJCYWNrT2ZmaWNlIiwiYXVkIjoiQmFja09mZmljZSJ9.RYdBYOjOrWH2NACgYbJUCz4GFeQXcfHWh-JOBkzV_P8",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Users",
								"new-password",
								""
							],
							"query": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9lbWFpbGFkZHJlc3MiOiIxMTkxNTgzQGlzZXAuaXBwLnB0IiwiZXhwIjoxNzI5OTY5NzUzLCJpc3MiOiJCYWNrT2ZmaWNlIiwiYXVkIjoiQmFja09mZmljZSJ9.RYdBYOjOrWH2NACgYbJUCz4GFeQXcfHWh-JOBkzV_P8"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "OperationRequest",
			"item": [
				{
					"name": "GET OperationRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								""
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "GET OperationRequest by Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "76d787a8-6065-4f07-a0ba-2104800eb6e2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "(OLD) GET by filter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/list/:doctorId?parameter=priority&value=Elective",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								"list",
								":doctorId"
							],
							"query": [
								{
									"key": "parameter",
									"value": "priority"
								},
								{
									"key": "value",
									"value": "Elective"
								}
							],
							"variable": [
								{
									"key": "doctorId",
									"value": "8a0253f1-bf76-4866-9555-b9499d7b84f6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET OperationRequest by DoctorId",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/doctorGetAll/:doctorId",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								"doctorGetAll",
								":doctorId"
							],
							"variable": [
								{
									"key": "doctorId",
									"value": "8a0253f1-bf76-4866-9555-b9499d7b84f6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GET OperationRequest by Filter",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/list/:doctorId",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								"list",
								":doctorId"
							],
							"query": [
								{
									"key": "patientId",
									"value": "49ebb437-e6ce-4ef1-ab87-34adfadf8ff0",
									"disabled": true
								},
								{
									"key": "priority",
									"value": "Emergency",
									"disabled": true
								},
								{
									"key": "status",
									"value": "Requested",
									"disabled": true
								},
								{
									"key": "operationTypeName",
									"value": "Operation Type C",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "doctorId",
									"value": "123975ce-01cf-40ba-8481-80a95abea161"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5053/Auth/Login/loginDto - Login Username/Password Copy",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiMmRlODRhMDEtNTZmZS00YWYwLWFkMzctZjM1MDJlNTcwMGI2IiwiaWF0IjoxNzI5ODU2NTY0LCJuYmYiOjE3Mjk4NTY1NjQsImV4cCI6MTczMDExNTc2NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.TYjqCnuCqvwTxJAbcdkPccrC05lrHhFcNRc3rPnrNDU",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin@hotmail.com\",\r\n    \"password\": \"AAAAAAAAAA1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST OperationRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"opTypeName\": \"Rotator cuff repair\",\n    \"deadlineDate\": \"2024-11-15T00:00:00\",\n    \"priority\": \"Emergency\",\n    \"patientEmail\": \"patientone@example.com\",\n    \"doctorEmail\": \"D20232@healthcareapp.com\",\n    \"description\": \"Urgent surgery for abdominal pain\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "PATCH OperationRequest",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"Updated description.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "9185d215-63d2-4f1b-bb17-f117df7f426a"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE OperationRequest",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiIxMjIxNjk1QGlzZXAuaXBwLnB0Iiwicm9sZSI6IkFkbWluIiwianRpIjoiOGI1ZjlmZDUtNDFjZi00MGQwLWIwMGUtZjY5ZTVlM2ZiYjUzIiwiaWF0IjoxNzI5ODU1NzQ0LCJuYmYiOjE3Mjk4NTU3NDQsImV4cCI6MTczMDExNDk0NCwiaXNzIjoiQXV0aF9CYWNrT2ZmaWMiLCJhdWQiOiJBVVRIIn0.UmJzXVFfQZd8Ct6dxF3WhEDZ3o3jBp5_ib5OxRXvtqk",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/OperationRequest/:id",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"OperationRequest",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "10ce1f83-9c0b-4fd2-a9d2-9e16af729a36"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "AUTH",
			"item": [
				{
					"name": "http://localhost:5053/Auth/Login/loginDto - Login Username/Password",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImE1NTBlODQ0LTBmOGEtNGJlYy1hZGMzLTAyNjcxMTM1YTAzZiIsImlhdCI6MTcyOTU5MzQyMiwibmJmIjoxNzI5NTkzNDIyLCJleHAiOjE3Mjk4NTI2MjIsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.JU9Qyg7rHGHyQqym9FA0oskPLEQcZBitHCkpMr7ezks",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"admin@hotmail.com\",\r\n    \"password\": \"AAAAAAAAAAA1!\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5053/Auth/Login/loginDto",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5053",
							"path": [
								"Auth",
								"Login",
								"loginDto"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5000/Backoffice/Login/userExists - confirmar que existe user",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic QTFAaGVhbHRoY2FyZWFwcC5jb206QUFBQUFBQUFBQV8xIQ==",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:5000/Backoffice/Login/userExists",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"Backoffice",
								"Login",
								"userExists"
							]
						}
					},
					"response": []
				},
				{
					"name": "http://localhost:5053/Auth/Login/loginDto - Login SÃ³ com TOKEN",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"jwt\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJBMUBoZWFsdGhjYXJlYXBwLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImU4YzUyYTM3LTZhZTgtNGViYS1iMGQxLWY2YmZmOTY4ZDBiZiIsImlhdCI6MTcyOTY5NzQ4MywibmJmIjoxNzI5Njk3NDgzLCJleHAiOjE3Mjk5NTY2ODMsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.0O-5FkmT-W5knqjo0j3tyLy7b5CMk97A-q3plTwzjog\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:5053/Auth/Login/loginDto",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5053",
							"path": [
								"Auth",
								"Login",
								"loginDto"
							]
						}
					},
					"response": []
				},
				{
					"name": "patch set password after email",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "https://localhost:5001/api/Users/GUID?password=changeMyPasssword",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Users",
								"GUID"
							],
							"query": [
								{
									"key": "password",
									"value": "changeMyPasssword"
								}
							]
						},
						"description": "Mudar GUID para correspondente existente no sistema\n\nMudar campo ChangeMyPassword - para password desejado que corresponda Ã s restriÃ§oes do negocio"
					},
					"response": []
				}
			]
		},
		{
			"name": "US5.1.1",
			"item": [
				{
					"name": "https://localhost:5001/api/Users/",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6ImY1MmJhODkyLTViOTktNDM3My05NzY0LTJmYjNiOWRjNDY2MSIsImlhdCI6MTcyOTg1Njg0NywibmJmIjoxNzI5ODU2ODQ3LCJleHAiOjE3MzAxMTYwNDcsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.R3mrorlyTnLfRXYfm77F9FQ3t00KvevU8YqLNGe-xvE",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"Admin@gmail.com\",\r\n    \"role\":\"Admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://localhost:5001/api/Users/",
							"protocol": "https",
							"host": [
								"localhost"
							],
							"port": "5001",
							"path": [
								"api",
								"Users",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjhkNWY5NmY3LWViMTAtNDlhMi1hZDgzLThlYWEwZTVhYTk0MSIsImlhdCI6MTczMDc1NjM4OCwibmJmIjoxNzMwNzU2Mzg4LCJleHAiOjE3MzEwMTU1ODgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.hC5CRaLZmmVNSyAPpRMW9jBQlxDaVhm7iKPpZS12e_k",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1",
			"disabled": true
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		},
		{
			"key": "Authorization",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJhZG1pbkBob3RtYWlsLmNvbSIsInJvbGUiOiJBZG1pbiIsImp0aSI6IjhkNWY5NmY3LWViMTAtNDlhMi1hZDgzLThlYWEwZTVhYTk0MSIsImlhdCI6MTczMDc1NjM4OCwibmJmIjoxNzMwNzU2Mzg4LCJleHAiOjE3MzEwMTU1ODgsImlzcyI6IkF1dGhfQmFja09mZmljIiwiYXVkIjoiQVVUSCJ9.hC5CRaLZmmVNSyAPpRMW9jBQlxDaVhm7iKPpZS12e_k",
			"type": "string"
		},
		{
			"key": "opTypePost1",
			"value": ""
		}
	]
}